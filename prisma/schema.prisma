// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                         @id @default(autoincrement())
  uuid                       String
  email                      String                      @unique
  sessions                   Session[]
  username                   String
  google_id                  String?
  bridgeUserAndSpecification BridgeUserAndSpecfication[]
  SpecificationSnapshot      SpecificationSnapshot[]
  Workspaces                 BridgeWorkspaceAndUser[]
  Workspace                  Workspace[]
  Specification              Specification[]
}

model Workspace {
  id             Int                      @id @default(autoincrement())
  uuid           String
  name           String
  ownerId        Int
  owner          User                     @relation(references: [id], fields: [ownerId], onDelete: Cascade)
  members        BridgeWorkspaceAndUser[]
  specifications Specification[]
}

model BridgeWorkspaceAndUser {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  workspaceId Int
  workspace   Workspace @relation(references: [id], fields: [workspaceId], onDelete: Cascade)
}

model Session {
  id        String   @id
  uuid      String
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model BridgeUserAndSpecfication {
  id     Int           @id @default(autoincrement())
  userId Int
  user   User          @relation(references: [id], fields: [userId], onDelete: Cascade)
  specId Int
  spec   Specification @relation(references: [id], fields: [specId], onDelete: Cascade)
}

model Specification {
  id                         Int                         @id @default(autoincrement())
  uuid                       String
  name                       String
  specSnapshots              SpecificationSnapshot[]
  ownerId                    Int
  owner                      User                        @relation(references: [id], fields: [ownerId], onDelete: Cascade)
  bridgeUserAndSpecification BridgeUserAndSpecfication[]
  workspaceId                Int?
  workspace                  Workspace?                  @relation(references: [id], fields: [workspaceId], onDelete: Cascade)
}

model SpecificationSnapshot {
  id             Int           @id @default(autoincrement())
  uuid           String
  specId         Int
  spec           Specification @relation(references: [id], fields: [specId], onDelete: Cascade)
  prevSnapshotId String        @unique
  createdAt      DateTime      @default(now())
  versionNum     Int
  content        String
  creatorId      Int
  createdBy      User          @relation(references: [id], fields: [creatorId], onDelete: Cascade)
}
