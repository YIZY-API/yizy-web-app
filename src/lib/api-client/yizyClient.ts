// This file is auto generated by YIZY API, do not modify.
// Instead, update your API specification and upload it to yizy.dev/demo to regenerate this file!
export interface YizyError {
  code: number;
  msg: string;
}

export interface CreateSpecResult {
  name: string;
  id: string;
}

export interface UpdateSpecResult {
  content: string;
  versionNumber: number;
  prevSnapshotId: string;
}

export interface SpecIdAndName {
  id: string;
  name: string;
}

export interface GetSpecsResult {
  resultset: SpecIdAndName[];
}

export interface SpecificationSnapshot {
  content: string;
  versionNumber: string;
  name: string;
  snapshotId: string;
}

export interface CreateSpecRequest {
  name: string;
  creatorUserId: string;
}

export interface CreateSpecResponse {
  error: YizyError | null;
  result: CreateSpecResult | null;
}

export interface UpdateSpecRequest {
  specId: string;
  prevSpecSnapshotId: string;
  content: string;
  updatorUserId: string;
}

export interface UpdateSpecResponse {
  error: YizyError | null;
  result: UpdateSpecResult | null;
}

export interface GetSpecsRequest {
  userId: string;
}

export interface GetSpecsResponse {
  error: YizyError | null;
  result: GetSpecsResult;
}

export interface GetLatestSpecByIdRequest {
  id: string;
}

export interface GetLatestSpecByIdResponse {
  error: YizyError | null;
  result: SpecificationSnapshot | null;
}

export interface YizyServiceApiClientConfigs {
  baseUrl: string;
  requestConfigs: RequestInit;
}

export interface Hooks {
  overrideRequestConfigs?: (
    defaultConfigs: RequestInit,
  ) => RequestInit;
  onResponse?: (res: Response) => void;
}

export const localConfigs: YizyServiceApiClientConfigs = {
  baseUrl: "http://localhost:5173",
  requestConfigs: {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
  },
};

export const prodConfigs: YizyServiceApiClientConfigs = {
  baseUrl: "https://yizy.dev",
  requestConfigs: {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
  },
};

export async function createSpec(
  req: CreateSpecRequest,
  configs: YizyServiceApiClientConfigs,
  hooks?: Hooks,
): Promise<CreateSpecResponse> {
  let opts = configs.requestConfigs;

  opts.body = JSON.stringify(req);

  if (hooks?.overrideRequestConfigs) {
    opts = hooks.overrideRequestConfigs(opts);
  }

  const response: Response = await fetch(
    configs.baseUrl + "/api/spec/createSpec",
    opts,
  );

  if (hooks?.onResponse) {
    hooks.onResponse(response);
  }

  const result: CreateSpecResponse = await response.json();
  return result;
}

export async function updateSpec(
  req: UpdateSpecRequest,
  configs: YizyServiceApiClientConfigs,
  hooks?: Hooks,
): Promise<UpdateSpecResponse> {
  let opts = configs.requestConfigs;

  opts.body = JSON.stringify(req);

  if (hooks?.overrideRequestConfigs) {
    opts = hooks.overrideRequestConfigs(opts);
  }

  const response: Response = await fetch(
    configs.baseUrl + "/api/spec/updateSpec",
    opts,
  );

  if (hooks?.onResponse) {
    hooks.onResponse(response);
  }

  const result: UpdateSpecResponse = await response.json();
  return result;
}

export async function getSpecs(
  req: GetSpecsRequest,
  configs: YizyServiceApiClientConfigs,
  hooks?: Hooks,
): Promise<GetSpecsResponse> {
  let opts = configs.requestConfigs;

  opts.body = JSON.stringify(req);

  if (hooks?.overrideRequestConfigs) {
    opts = hooks.overrideRequestConfigs(opts);
  }

  const response: Response = await fetch(
    configs.baseUrl + "/api/spec/getSpecs",
    opts,
  );

  if (hooks?.onResponse) {
    hooks.onResponse(response);
  }

  const result: GetSpecsResponse = await response.json();
  return result;
}

export async function getLatestSpecById(
  req: GetLatestSpecByIdRequest,
  configs: YizyServiceApiClientConfigs,
  hooks?: Hooks,
): Promise<GetLatestSpecByIdResponse> {
  let opts = configs.requestConfigs;

  opts.body = JSON.stringify(req);

  if (hooks?.overrideRequestConfigs) {
    opts = hooks.overrideRequestConfigs(opts);
  }

  const response: Response = await fetch(
    configs.baseUrl + "/api/spec/getLatestSpecById",
    opts,
  );

  if (hooks?.onResponse) {
    hooks.onResponse(response);
  }

  const result: GetLatestSpecByIdResponse = await response.json();
  return result;
}
